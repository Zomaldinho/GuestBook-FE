{"version":3,"sources":["components/Post/Post.js","components/Edit/Edit.js","components/Navbar/Navbar.js","components/NewPost/NewPost.js","components/Signin/Signin.js","components/Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","delete","post","window","confirm","fetch","_id","method","then","componentDidMount","catch","err","console","log","txtChange","e","setState","replyText","target","value","enterPress","i","which","addReply","state","alert","headers","body","JSON","stringify","description","writtenBy","user","name","res","json","data","document","getElementsByClassName","edit","editedPost","routeChange","response","className","this","map","title","createdBy","email","onClick","type","placeholder","onChange","txt","onKeyPress","replies","reply","Component","Edit","titleChange","descriptionChange","submit","defaultValue","Navbar","NewPost","Signin","emailChange","passwordChange","password","toLowerCase","id","loadUser","autoComplete","Register","nameChange","password2Change","password2","errmsg","includes","App","Routing","route","date","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.899a4432.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Post.css';\r\n\r\nclass Post extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      replyText: '',\r\n    };\r\n  }\r\n\r\n  //getting intial data from server\r\n  componentDidMount() {\r\n    fetch('https://gb-serv.herokuapp.com/')\r\n      .then((response) => response.json())\r\n      .then((data) => this.setState({ data }));\r\n  }\r\n\r\n  //handling post deletion\r\n  delete = (post) => {\r\n    let confirm = window.confirm('Are you sure you want to delete this post?');\r\n    if (confirm) {\r\n      fetch(`https://gb-serv.herokuapp.com/delete/${post._id}`, {\r\n        method: 'delete',\r\n      })\r\n        .then(this.componentDidMount())\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n\r\n  //handling reply input text change\r\n  txtChange = (e) => {\r\n    this.setState({ replyText: e.target.value });\r\n  };\r\n\r\n  //handle enter key press on the reply input text\r\n  enterPress = (e, post, i) => {\r\n    if (e.which === 13) {\r\n      this.addReply(post, i);\r\n    }\r\n  };\r\n\r\n  //updating the replies when click Reply button\r\n  addReply = (post, i) => {\r\n    if (!this.state.replyText) {\r\n      return alert('You can not submit empty Reply');\r\n    }\r\n    fetch(`https://gb-serv.herokuapp.com/reply/${post._id}`, {\r\n      method: 'post',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        description: this.state.replyText,\r\n        writtenBy: this.props.user.name,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data._id) {\r\n          this.componentDidMount();\r\n          document.getElementsByClassName('rplyTxt')[i].value = '';\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  //handling Edit button onClick event\r\n  edit = (post) => {\r\n    this.props.editedPost(post);\r\n    this.props.routeChange('edit');\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h2>Welcome {this.props.user.name} to the Guest Book App</h2>\r\n        {/* Looping throught the posts */}\r\n        {this.state.data.map((post, i) => {\r\n          return (\r\n            <div className=\"post\">\r\n              <h3>{post.title}</h3>\r\n              <p className=\"pstTxt\">{post.description}</p>\r\n              <p>{post.createdBy} wrote</p>\r\n              {/* Adding condition to show the edit and delete buttons only if the user is the same one who created the post */}\r\n              {post.email === this.props.user.email ? (\r\n                <div>\r\n                  <button onClick={() => this.edit(post)}>Edit</button>\r\n                  <button onClick={() => this.delete(post)}>Delete</button>\r\n                </div>\r\n              ) : (\r\n                <br></br>\r\n              )}\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Add a reply\"\r\n                className=\"rplyTxt\"\r\n                onChange={(txt) => this.txtChange(txt)}\r\n                onKeyPress={(e) => this.enterPress(e, post, i)}\r\n              ></input>\r\n              <button onClick={() => this.addReply(post, i)}>reply</button>\r\n              {post.replies.map((reply) => {\r\n                return (\r\n                  <div className=\"reply\">\r\n                    <p className=\"pstTxt\">{reply.description}</p>\r\n                    <p>{reply.writtenBy} replied</p>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\r\n\r\nclass Edit extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: this.props.editedPost.title,\r\n      description: this.props.editedPost.description,\r\n    };\r\n  }\r\n\r\n  //handling title change\r\n  titleChange = (txt) => {\r\n    this.setState({ title: txt.target.value });\r\n  };\r\n\r\n  //handling description change\r\n  descriptionChange = (txt) => {\r\n    this.setState({ description: txt.target.value });\r\n  };\r\n\r\n  //handling submit button onClick event\r\n  submit = () => {\r\n    if (!this.state.title || !this.state.description) {\r\n      return alert('You can not submit empty Title and/or Description');\r\n    }\r\n    fetch(`https://gb-serv.herokuapp.com/edit/${this.props.editedPost._id}`, {\r\n      method: 'post',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        title: this.state.title,\r\n        description: this.state.description,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data._id) {\r\n          this.props.routeChange('home');\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    const { routeChange, editedPost } = this.props;\r\n    return (\r\n      <div className=\"forms\">\r\n        <fieldset>\r\n          <legend>Edit Your Post</legend>\r\n          <label>Title:</label>\r\n          <input\r\n            type=\"text\"\r\n            defaultValue={editedPost.title}\r\n            onChange={(txt) => this.titleChange(txt)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Description:</label>\r\n          <textarea\r\n            defaultValue={editedPost.description}\r\n            onChange={(txt) => this.descriptionChange(txt)}\r\n          ></textarea>\r\n          <br></br>\r\n          <br></br>\r\n          <button onClick={() => this.submit()}>Submit</button>\r\n          <button onClick={() => routeChange('home')}>Cancel</button>\r\n        </fieldset>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Edit;\r\n","import React from 'react';\r\nimport './Navbar.css'\r\n\r\nconst Navbar = ({ routeChange }) => {\r\n  return (\r\n    <div className=\"Navbar\">\r\n      <h1>Guest Book App</h1>\r\n      <div className=\"NavLinks\">\r\n        <p onClick={() => routeChange('home')}>Home</p>\r\n        <p onClick={() => routeChange('newPost')}>Add New Post</p>\r\n        <p onClick={() => routeChange('signin')}>Signout</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\n\r\nclass NewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      description: '',\r\n    };\r\n  }\r\n\r\n  //handling title change\r\n  titleChange = (txt) => {\r\n    this.setState({ title: txt.target.value });\r\n  };\r\n\r\n  //handling description change\r\n  descriptionChange = (txt) => {\r\n    this.setState({ description: txt.target.value });\r\n  };\r\n\r\n  //handling submit button onclick event\r\n  submit = () => {\r\n    if (!this.state.title || !this.state.description) {\r\n      return alert('You can not submit empty Title and/or Description');\r\n    }\r\n    fetch(`https://gb-serv.herokuapp.com/post`, {\r\n      method: 'post',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        title: this.state.title,\r\n        description: this.state.description,\r\n        createdBy: this.props.user.name,\r\n        email: this.props.user.email,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data._id) {\r\n          this.props.routeChange('home');\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"forms\">\r\n        <fieldset>\r\n          <legend>Add New Post</legend>\r\n          <label>Title:</label>\r\n          <input type=\"text\" onChange={(txt) => this.titleChange(txt)}></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Description:</label>\r\n          <textarea onChange={(txt) => this.descriptionChange(txt)}></textarea>\r\n          <br></br>\r\n          <br></br>\r\n          <button onClick={() => this.submit()}>Submit</button>\r\n          <button onClick={() => this.props.routeChange('home')}>\r\n            Cancel\r\n          </button>\r\n        </fieldset>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewPost;\r\n","import React, { Component } from 'react';\r\n\r\nclass Signin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n    };\r\n  }\r\n\r\n  //handle email change\r\n  emailChange = (txt) => {\r\n    this.setState({ email: txt.target.value });\r\n  };\r\n\r\n  //handle password change\r\n  passwordChange = (txt) => {\r\n    this.setState({ password: txt.target.value });\r\n  };\r\n\r\n  //handle enter key press\r\n  enterPress=(e)=>{\r\n    if(e.which=== 13){\r\n      this.submit()\r\n    }\r\n  }\r\n\r\n  //handle submit button onclick event\r\n  submit = () => {\r\n    fetch(`https://gb-serv.herokuapp.com/signin`, {\r\n      method: 'post',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email: this.state.email.toLowerCase(),\r\n        password: this.state.password,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.id) {\r\n          this.props.loadUser(data);\r\n          this.props.routeChange('home');\r\n        } else {\r\n          window.alert('Please Fill All The Fields With Proper Credintals');\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"forms\">\r\n        <br></br>\r\n        <h1>Welcome to the Geust Book App</h1>\r\n        <h4>Please Sign in or Register to get to the App</h4>\r\n        <fieldset>\r\n          <legend>Sign In</legend>\r\n          <label>Email:</label>\r\n          <input\r\n            type=\"text\"\r\n            autoComplete=\"on\"\r\n            onChange={(txt) => this.emailChange(txt)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            onChange={(txt) => this.passwordChange(txt)}\r\n            onKeyPress={(e)=>this.enterPress(e)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <button onClick={() => this.submit()}>Submit</button>\r\n          <br></br>\r\n          <button onClick={() => this.props.routeChange('register')}>\r\n            Register\r\n          </button>\r\n        </fieldset>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;\r\n","import React, { Component } from 'react';\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      password: '',\r\n      password2: '',\r\n    };\r\n  }\r\n\r\n  //handling name change\r\n  nameChange = (txt) => {\r\n    this.setState({ name: txt.target.value });\r\n  };\r\n\r\n  //handling email change\r\n  emailChange = (txt) => {\r\n    this.setState({ email: txt.target.value });\r\n  };\r\n\r\n  //handling password change\r\n  passwordChange = (txt) => {\r\n    this.setState({ password: txt.target.value });\r\n  };\r\n\r\n  //handling retyped password change\r\n  password2Change = (txt) => {\r\n    this.setState({ password2: txt.target.value });\r\n  };\r\n\r\n  //handle enter key press\r\n  enterPress=(e)=>{\r\n    if(e.which=== 13){\r\n      this.submit()\r\n    }\r\n  }\r\n\r\n  //handle register button onclick event\r\n  submit = () => {\r\n    if (this.state.password !== this.state.password2) {\r\n      return window.alert('Re-Typed Password is Not Matching');\r\n    }\r\n    fetch(`https://gb-serv.herokuapp.com/register`, {\r\n      method: 'post',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        name: this.state.name,\r\n        email: this.state.email.toLowerCase(),\r\n        password: this.state.password,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.id) {\r\n          this.props.loadUser(data);\r\n          this.props.routeChange('home');\r\n        } else if (data === 'Wrong Inputs') {\r\n          window.alert('Please Fill All The Fields With Proper Credintals ');\r\n        } else if (data.errmsg.includes('duplicate key')) {\r\n          window.alert('Email is Already Registered');\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"forms\">\r\n        <br></br>\r\n        <h1>Welcome to the Geust Book App</h1>\r\n        <h4>Please Sign in or Register to get to the App</h4>\r\n        <fieldset>\r\n          <legend>Register</legend>\r\n          <label>Name:</label>\r\n          <input type=\"text\" onChange={(txt) => this.nameChange(txt)}></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Email:</label>\r\n          <input\r\n            type=\"email\"\r\n            onChange={(txt) => this.emailChange(txt)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>password:</label>\r\n          <input\r\n            type=\"password\"\r\n            onChange={(txt) => this.passwordChange(txt)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Re-type Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            onChange={(txt) => this.password2Change(txt)}\r\n            onKeyPress={(e)=>this.enterPress(e)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <button onClick={() => this.submit()}> Register</button>\r\n          <br></br>\r\n          <button onClick={() => this.props.routeChange('signin')}>\r\n            Signin\r\n          </button>\r\n        </fieldset>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React, { Component } from 'react';\nimport Post from './components/Post/Post';\nimport Edit from './components/Edit/Edit';\nimport Navbar from './components/Navbar/Navbar';\nimport NewPost from './components/NewPost/NewPost';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      route: 'signin',\n      editedPost: null,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        date: '',\n      },\n    };\n  }\n\n  //Routing functions to handle renered components\n  Routing = (route) => {\n    this.setState({ route: route });\n  };\n\n  //retrieving user data from signin and storing in state\n  loadUser = (user) => {\n    this.setState({\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        date: user.date,\n      },\n    });\n  };\n\n  //To save data from post component and pass it to the Edit component\n  editedPost = (post) => {\n    this.setState({ editedPost: post });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.route === 'home' ? (\n          <div>\n            <Navbar routeChange={this.Routing} />\n            <Post\n              routeChange={this.Routing}\n              editedPost={this.editedPost}\n              user={this.state.user}\n            />\n          </div>\n        ) : this.state.route === 'edit' ? (\n          <div>\n            <div>\n              <Navbar routeChange={this.Routing} />\n              <Edit\n                routeChange={this.Routing}\n                editedPost={this.state.editedPost}\n              />\n            </div>\n          </div>\n        ) : this.state.route === 'newPost' ? (\n          <div>\n            <Navbar routeChange={this.Routing} />\n            <NewPost routeChange={this.Routing} user={this.state.user} />\n          </div>\n        ) : this.state.route === 'signin' ? (\n          <Signin routeChange={this.Routing} loadUser={this.loadUser} />\n        ) : this.state.route === 'register' ? (\n          <Register routeChange={this.Routing} loadUser={this.loadUser} />\n        ) : (\n          <div></div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}